// Generated by CoffeeScript 2.4.1
(function() {
  // Deletes all images that are bloat (memes, screenshots, non relevant graphs etc).
  var Script, fs, path, utils;

  fs = require("fs");

  path = require("path");

  utils = require("./utils.js");

  // Script implementation.
  Script = async function(folders) {
    var bloatTags, bt, et, ex, extraTags, file, folder, folderTags, hasBloat, i, imgTotalScore, imgfile, j, k, l, len, len1, len2, len3, result, singleScore, tags, toDelete, totalScore;
    // Anything above these single / total score is considered bloat.
    singleScore = 0.85;
    totalScore = 1.25;
    // Array of files to be deleted.
    toDelete = [];
    // Tags to consider.
    bloatTags = ["meme", "photo caption", "screenshot", "spoof", "website"];
    extraTags = ["advertising", "document", "map", "text"];
    try {
      for (i = 0, len = folders.length; i < len; i++) {
        folder = folders[i];
        folderTags = utils.getFolderTags(folder);
        for (file in folderTags) {
          tags = folderTags[file];
          try {
            imgTotalScore = 0;
            hasBloat = false;
            for (j = 0, len1 = bloatTags.length; j < len1; j++) {
              bt = bloatTags[j];
              if (tags[bt] == null) {
                tags[bt] = 0;
              }
              imgTotalScore += tags[bt];
              if (tags[bt] > singleScore) {
                hasBloat = true;
              }
            }
            for (k = 0, len2 = extraTags.length; k < len2; k++) {
              et = extraTags[k];
              if (tags[et] == null) {
                tags[et] = 0;
              }
              imgTotalScore += tags[et] / 3;
            }
            if (hasBloat || imgTotalScore > totalScore) {
              imgfile = file.substring(0, file.length - 5);
              toDelete.push(imgfile);
              toDelete.push(file);
              console.log(`  ${imgfile} marked as bloat (score ${imgTotalScore})`);
            }
          } catch (error) {
            ex = error;
            console.error(file, ex);
          }
        }
        console.log("");
      }
// Delete unsafe files.
      for (l = 0, len3 = toDelete.length; l < len3; l++) {
        file = toDelete[l];
        try {
          result = fs.unlinkSync(file);
          console.log(`  ${file} - deleted`);
        } catch (error) {
          ex = error;
          console.error(`  ${file}`, ex);
        }
      }
      return (await true);
    } catch (error) {
      ex = error;
      console.error(ex);
      throw ex;
    }
  };

  // Export!
  module.exports = Script;

}).call(this);
